import java.util.ArrayList;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 */
public class CargoPlane extends Vehicle {
    final double GAS_RATE = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {
        super();
    }
    
    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);
    }
    
    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override
    public void fill(ArrayList<Package> warehousePackages) {
        int incrementMax = 0;
        //bubble sort the distances
        for (int i = 0; i < warehousePackages.size() - 1; i++) {
            for (int j = 0; j < warehousePackages.size() - i - 1; j++) {
                if (Math.abs(this.getZipDest() - warehousePackages.get(j).getDestination().getZipCode())
                        > Math.abs(this.getZipDest() - warehousePackages.get(j + 1).getDestination().getZipCode())) {
                    Package temp = warehousePackages.get(j);
                    warehousePackages.set(j, warehousePackages.get(j + 1));
                    warehousePackages.set(j + 1, temp);
                }
            }
        }
        for (int i = 0; i < warehousePackages.size(); i++) {
            if (i % 10 == 1) {
                incrementMax += 10;
            }
            if (this.getCurrentWeight() + warehousePackages.get(0).getWeight() > this.getMaxWeight()) {
                break;
            } else {
                addPackage(warehousePackages.get(0));
                warehousePackages.remove(0);
                this.setMaxRange(incrementMax);
            }
        }
        
    }

    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */
    @Override
    public double getProfit() {
    	double total = 0;
    	ArrayList<Package> arr = this.getPackages();
    	for (int i = 0; i < arr.size(); i++) {
    	    total += arr.get(i).getPrice();
        }
        return total - (this.getMaxRange() * GAS_RATE);
        
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        ArrayList<Package> arr = this.getPackages();
        String addresses = "";
        for (int i = 0; i < arr.size(); i++) {
            addresses = addresses + arr.get(i).shippingLabel();
        }
        return  "==========Cargo Plane Report==========\n" + "License Plate No.: " + this.getLicensePlate() + "\n"
                + "Destination: " + this.getZipDest() + "\n" + "Weight Load: "
                + String.format("%.2f", this.getCurrentWeight()) + "/"
                + String.format("%.2f", this.getMaxWeight()) + "\n" +
                "Net Profit: " +  "$" + String.format("%.2f", this.getProfit()) +
                "\n" + "=====Shipping Labels=====\n" + addresses + "==============================";
       
    }

    @Override
    public String type() {
        return "CargoPlane";
    }

   
   
}
